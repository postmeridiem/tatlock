============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.4.3, pluggy-1.6.0
rootdir: /home/jeroenschweitzer/tatlock
plugins: asyncio-0.21.1, anyio-3.7.1, cov-4.1.0
asyncio: mode=strict
collected 69 items

tests/test_api_endpoints.py ..F.EFEFEFEFEFEFEFEEEEEEEEEEEEEEEEF          [ 50%]
tests/test_cortex_agent.py .                                             [ 52%]
tests/test_database_setup.py ......F                                     [ 62%]
tests/test_hippocampus_database.py FF                                    [ 65%]
tests/test_hippocampus_recall.py .....                                   [ 72%]
tests/test_hippocampus_remember.py ..                                    [ 75%]
tests/test_hippocampus_user_database.py ...                              [ 79%]
tests/test_security.py ........F.....                                    [100%]

==================================== ERRORS ====================================
_____________ ERROR at setup of TestAPIAuthentication.test_logout ______________

client = <starlette.testclient.TestClient object at 0x79d5a8db5270>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
___ ERROR at setup of TestAPIProtectedEndpoints.test_chat_endpoint_with_auth ___

client = <starlette.testclient.TestClient object at 0x79d5a8cfbc70>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
___ ERROR at setup of TestAPIProtectedEndpoints.test_profile_page_with_auth ____

client = <starlette.testclient.TestClient object at 0x79d5a8cfbc70>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
____ ERROR at setup of TestAdminAPIEndpoints.test_admin_dashboard_with_auth ____

client = <starlette.testclient.TestClient object at 0x79d5a8ebe2f0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
______ ERROR at setup of TestAdminAPIEndpoints.test_admin_stats_with_auth ______

client = <starlette.testclient.TestClient object at 0x79d5a8cea290>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
___ ERROR at setup of TestAdminAPIEndpoints.test_admin_users_list_with_auth ____

client = <starlette.testclient.TestClient object at 0x79d5a8ea1030>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
___ ERROR at setup of TestAdminAPIEndpoints.test_admin_roles_list_with_auth ____

client = <starlette.testclient.TestClient object at 0x79d5a8da97b0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
___ ERROR at setup of TestAdminAPIEndpoints.test_admin_groups_list_with_auth ___

client = <starlette.testclient.TestClient object at 0x79d5a8ebd0c0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____________ ERROR at setup of TestAdminUserCRUD.test_create_user _____________

client = <starlette.testclient.TestClient object at 0x79d5a8ea1540>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
______________ ERROR at setup of TestAdminUserCRUD.test_get_user _______________

client = <starlette.testclient.TestClient object at 0x79d5a8ebf940>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____________ ERROR at setup of TestAdminUserCRUD.test_update_user _____________

client = <starlette.testclient.TestClient object at 0x79d5a8ce89a0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____________ ERROR at setup of TestAdminUserCRUD.test_delete_user _____________

client = <starlette.testclient.TestClient object at 0x79d5a8ea1bd0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____________ ERROR at setup of TestAdminRoleCRUD.test_create_role _____________

client = <starlette.testclient.TestClient object at 0x79d5a8ea1180>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
______________ ERROR at setup of TestAdminRoleCRUD.test_get_role _______________

client = <starlette.testclient.TestClient object at 0x79d5a8cf9db0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____________ ERROR at setup of TestAdminRoleCRUD.test_update_role _____________

client = <starlette.testclient.TestClient object at 0x79d5a8ebc7c0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____________ ERROR at setup of TestAdminRoleCRUD.test_delete_role _____________

client = <starlette.testclient.TestClient object at 0x79d5a8c2bdf0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
____________ ERROR at setup of TestAdminGroupCRUD.test_create_group ____________

client = <starlette.testclient.TestClient object at 0x79d5a8ea98d0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____________ ERROR at setup of TestAdminGroupCRUD.test_get_group ______________

client = <starlette.testclient.TestClient object at 0x79d5a8c2f070>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
____________ ERROR at setup of TestAdminGroupCRUD.test_update_group ____________

client = <starlette.testclient.TestClient object at 0x79d5a8d07d00>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
____________ ERROR at setup of TestAdminGroupCRUD.test_delete_group ____________

client = <starlette.testclient.TestClient object at 0x79d5a8c2c970>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
__________ ERROR at setup of TestAPIErrorHandling.test_404_not_found ___________

client = <starlette.testclient.TestClient object at 0x79d5a8d33a00>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
___________ ERROR at setup of TestAPIErrorHandling.test_invalid_json ___________

client = <starlette.testclient.TestClient object at 0x79d5a8c28d60>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
_____ ERROR at setup of TestAPIErrorHandling.test_missing_required_fields ______

client = <starlette.testclient.TestClient object at 0x79d5a8ea1180>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    @pytest.fixture
    def authenticated_admin_client(client, admin_user):
        """Create a test client authenticated as admin."""
        # Login as admin
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/conftest.py:98: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
=================================== FAILURES ===================================
________________ TestAPIAuthentication.test_login_auth_success _________________

self = <tests.test_api_endpoints.TestAPIAuthentication object at 0x79d5a8ceb160>
client = <starlette.testclient.TestClient object at 0x79d5a8db4ac0>
admin_user = {'email': 'admin@test.com', 'first_name': 'Admin', 'last_name': 'User', 'password': 'admin123', ...}

    def test_login_auth_success(self, client, admin_user):
        """Test successful login."""
        response = client.post("/login/auth", json={
            "username": admin_user['username'],
            "password": admin_user['password']
        })
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/test_api_endpoints.py:30: AssertionError
---------------------------- Captured stdout setup -----------------------------
Created longterm database for user 'admin'
__________ TestAPIProtectedEndpoints.test_chat_endpoint_requires_auth __________

self = <tests.test_api_endpoints.TestAPIProtectedEndpoints object at 0x79d5a8ceb940>
client = <starlette.testclient.TestClient object at 0x79d5a8cfbb80>

    def test_chat_endpoint_requires_auth(self, client):
        """Test chat endpoint requires authentication."""
        response = client.post("/cortex", json={
            "message": "Hello",
            "history": []
        })
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_api_endpoints.py:57: AssertionError
__________ TestAPIProtectedEndpoints.test_profile_page_requires_auth ___________

self = <tests.test_api_endpoints.TestAPIProtectedEndpoints object at 0x79d5a8ceba90>
client = <starlette.testclient.TestClient object at 0x79d5a8db4370>

    def test_profile_page_requires_auth(self, client):
        """Test profile page requires authentication."""
        response = client.get("/profile")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_api_endpoints.py:75: AssertionError
___________ TestAdminAPIEndpoints.test_admin_dashboard_requires_auth ___________

self = <tests.test_api_endpoints.TestAdminAPIEndpoints object at 0x79d5a8ce8340>
client = <starlette.testclient.TestClient object at 0x79d5a8cf9bd0>

    def test_admin_dashboard_requires_auth(self, client):
        """Test admin dashboard requires authentication."""
        response = client.get("/admin/dashboard")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_api_endpoints.py:90: AssertionError
_____________ TestAdminAPIEndpoints.test_admin_stats_requires_auth _____________

self = <tests.test_api_endpoints.TestAdminAPIEndpoints object at 0x79d5a8ce8ca0>
client = <starlette.testclient.TestClient object at 0x79d5a8db47f0>

    def test_admin_stats_requires_auth(self, client):
        """Test admin stats requires authentication."""
        response = client.get("/admin/stats")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_api_endpoints.py:101: AssertionError
__________ TestAdminAPIEndpoints.test_admin_users_list_requires_auth ___________

self = <tests.test_api_endpoints.TestAdminAPIEndpoints object at 0x79d5a8ce8160>
client = <starlette.testclient.TestClient object at 0x79d5a8cfbeb0>

    def test_admin_users_list_requires_auth(self, client):
        """Test admin users list requires authentication."""
        response = client.get("/admin/users")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_api_endpoints.py:117: AssertionError
__________ TestAdminAPIEndpoints.test_admin_roles_list_requires_auth ___________

self = <tests.test_api_endpoints.TestAdminAPIEndpoints object at 0x79d5a8ce8700>
client = <starlette.testclient.TestClient object at 0x79d5a8db5030>

    def test_admin_roles_list_requires_auth(self, client):
        """Test admin roles list requires authentication."""
        response = client.get("/admin/roles")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_api_endpoints.py:131: AssertionError
__________ TestAdminAPIEndpoints.test_admin_groups_list_requires_auth __________

self = <tests.test_api_endpoints.TestAdminAPIEndpoints object at 0x79d5a8ce8c10>
client = <starlette.testclient.TestClient object at 0x79d5a8eab4c0>

    def test_admin_groups_list_requires_auth(self, client):
        """Test admin groups list requires authentication."""
        response = client.get("/admin/groups")
>       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = <Response [200 OK]>.status_code

tests/test_api_endpoints.py:148: AssertionError
________________ TestAPIErrorHandling.test_unauthorized_access _________________

self = <tests.test_api_endpoints.TestAPIErrorHandling object at 0x79d5a8cea350>
client = <starlette.testclient.TestClient object at 0x79d5a8cfb220>

    def test_unauthorized_access(self, client):
        """Test unauthorized access to protected endpoints."""
        protected_endpoints = [
            "/cortex",
            "/profile",
            "/admin/dashboard",
            "/admin/users",
            "/admin/roles",
            "/admin/groups"
        ]
    
        for endpoint in protected_endpoints:
            response = client.get(endpoint)
>           assert response.status_code == 401
E           assert 405 == 401
E            +  where 405 = <Response [405 Method Not Allowed]>.status_code

tests/test_api_endpoints.py:441: AssertionError
________________ TestDatabaseSetup.test_foreign_key_constraints ________________

self = <tests.test_database_setup.TestDatabaseSetup object at 0x79d5a8e4b5b0>
temp_system_db = '/tmp/tmp1g7whv7z.db'

    def test_foreign_key_constraints(self, temp_system_db):
        """Test that foreign key constraints are properly set up."""
        conn = sqlite3.connect(temp_system_db)
        cursor = conn.cursor()
    
        # Enable foreign key constraints
        cursor.execute("PRAGMA foreign_keys = ON")
    
        # Try to insert invalid foreign key references
        # This should fail if constraints are working
    
        # Insert a user first
        cursor.execute("""
            INSERT INTO users (username, first_name, last_name, password_hash, salt)
            VALUES (?, ?, ?, ?, ?)
        """, ("testuser", "Test", "User", "hash", "salt"))
    
        # Try to insert invalid role_id (should fail)
        try:
            cursor.execute("""
                INSERT INTO user_roles (username, role_id)
                VALUES (?, ?)
            """, ("testuser", 999))  # Non-existent role_id
            assert False, "Should have failed due to foreign key constraint"
        except sqlite3.IntegrityError:
            pass  # Expected to fail
    
        # Try to insert invalid group_id (should fail)
        try:
>           cursor.execute("""
                INSERT INTO user_groups (username, group_id)
                VALUES (?, ?, ?)
            """, ("testuser", 999))  # Non-existent group_id
E           sqlite3.OperationalError: 3 values for 2 columns

tests/test_database_setup.py:261: OperationalError
__________________________ test_get_base_instructions __________________________

    def test_get_base_instructions():
        username = "testbase"
        ensure_user_database(username)
        # Insert instructions
        execute_user_query(username, "INSERT INTO rise_and_shine (instruction, enabled) VALUES (?, ?)", ("Instruction 1", 1))
        execute_user_query(username, "INSERT INTO rise_and_shine (instruction, enabled) VALUES (?, ?)", ("Instruction 2", 1))
        instructions = get_base_instructions(username)
>       assert "Instruction 1" in instructions
E       AssertionError: assert 'Instruction 1' in ['You are a helpful personal assistant named Tatlock. You speak formally like a British butler, calling me sir.  You a... new global prompt to your initialization prompts that sit in the the rise and shine table to capture the improvement']

tests/test_hippocampus_database.py:16: AssertionError
----------------------------- Captured stdout call -----------------------------
Created new longterm database for user 'testbase' at hippocampus/longterm/testbase.db
Executing SQL for user 'testbase': INSERT INTO rise_and_shine (instruction, enabled) VALUES (?, ?) with params ('Instruction 1', 1)
Executing SQL for user 'testbase': INSERT INTO rise_and_shine (instruction, enabled) VALUES (?, ?) with params ('Instruction 2', 1)
Executing SQL for user 'testbase': SELECT instruction FROM rise_and_shine WHERE enabled = 1 ORDER BY id; with params ()
Loaded 3 enabled base instructions from database for user 'testbase'.
________________________ test_query_personal_variables _________________________

    def test_query_personal_variables():
        username = "testpv"
        ensure_user_database(username)
        # Create tables and insert test data
        execute_user_query(username, "CREATE TABLE IF NOT EXISTS personal_variables_keys (entity_id INTEGER PRIMARY KEY, key TEXT)")
        execute_user_query(username, "CREATE TABLE IF NOT EXISTS personal_variables (entity_id INTEGER, value TEXT)")
        execute_user_query(username, "INSERT INTO personal_variables_keys (entity_id, key) VALUES (?, ?)", (1, "nickname"))
        execute_user_query(username, "INSERT INTO personal_variables (entity_id, value) VALUES (?, ?)", (1, "TatlockBot"))
        results = query_personal_variables("nickname", username)
>       assert any(r["value"] == "TatlockBot" for r in results)
E       assert False
E        +  where False = any(<generator object test_query_personal_variables.<locals>.<genexpr> at 0x79d5a8c81e00>)

tests/test_hippocampus_database.py:29: AssertionError
----------------------------- Captured stdout call -----------------------------
Created new longterm database for user 'testpv' at hippocampus/longterm/testpv.db
Executing SQL for user 'testpv': CREATE TABLE IF NOT EXISTS personal_variables_keys (entity_id INTEGER PRIMARY KEY, key TEXT) with params ()
Executing SQL for user 'testpv': CREATE TABLE IF NOT EXISTS personal_variables (entity_id INTEGER, value TEXT) with params ()
Executing SQL for user 'testpv': INSERT INTO personal_variables_keys (entity_id, key) VALUES (?, ?) with params (1, 'nickname')
Executing SQL for user 'testpv': INSERT INTO personal_variables (entity_id, value) VALUES (?, ?) with params (1, 'TatlockBot')
Executing SQL for user 'testpv': SELECT pv.value FROM personal_variables AS pv JOIN personal_variables_keys AS pvk ON pv.entity_id = pvk.entity_id WHERE pvk.key = ?; with params ('nickname',)
_____________________ TestSecurityManager.test_delete_user _____________________

self = <tests.test_security.TestSecurityManager object at 0x79d5a8cfa9e0>
security_manager = <stem.security.SecurityManager object at 0x79d5a8d33af0>

    def test_delete_user(self, security_manager):
        """Test user deletion."""
        # Create a user with roles and groups
        security_manager.create_user(
            username="deleteuser",
            first_name="Delete",
            last_name="User",
            password="password",
            email="delete@example.com"
        )
        security_manager.add_user_to_role("deleteuser", "user")
        security_manager.add_user_to_group("deleteuser", "users")
    
        # Verify user exists
        user = security_manager.get_user_by_username("deleteuser")
        assert user is not None
    
        # Delete user
        success = security_manager.delete_user("deleteuser")
        assert success is True
    
        # Verify user is deleted
        user = security_manager.get_user_by_username("deleteuser")
        assert user is None
    
        # Verify roles and groups are also deleted
        roles = security_manager.get_user_roles("deleteuser")
        groups = security_manager.get_user_groups("deleteuser")
>       assert roles == []
E       AssertionError: assert ['user'] == []
E         Left contains one more item: 'user'
E         Use -v to get more diff

tests/test_security.py:242: AssertionError
----------------------------- Captured stdout call -----------------------------
Created new longterm database for user 'deleteuser' at hippocampus/longterm/deleteuser.db
Created longterm database for user 'deleteuser'

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name                                      Stmts   Miss  Cover
-------------------------------------------------------------
config.py                                    14      3    79%
cortex/__init__.py                            0      0   100%
cortex/agent.py                              96     44    54%
hippocampus/__init__.py                       0      0   100%
hippocampus/database.py                      12      0   100%
hippocampus/recall.py                       107     56    48%
hippocampus/remember.py                      78     23    71%
hippocampus/user_database.py                 49     10    80%
main.py                                      90     28    69%
stem/__init__.py                              0      0   100%
stem/admin.py                               273    231    15%
stem/installation/database_setup.py          31      0   100%
stem/jsonutils.py                            13     13     0%
stem/logging.py                               5      5     0%
stem/models.py                               71      0   100%
stem/profile.py                              56     44    21%
stem/security.py                            483    156    68%
stem/static.py                               25     13    48%
stem/textutils.py                             6      6     0%
stem/timeawareness.py                        47     47     0%
stem/tools.py                               124    104    16%
test_topic.py                                22      8    64%
tests/__init__.py                             0      0   100%
tests/conftest.py                            53      8    85%
tests/test_api_endpoints.py                 230    158    31%
tests/test_cortex_agent.py                   22      0   100%
tests/test_database_setup.py                109      4    96%
tests/test_hippocampus_database.py           23      3    87%
tests/test_hippocampus_recall.py             43      0   100%
tests/test_hippocampus_remember.py           27      0   100%
tests/test_hippocampus_user_database.py      29      1    97%
tests/test_security.py                      160      1    99%
-------------------------------------------------------------
TOTAL                                      2298    966    58%

=========================== short test summary info ============================
FAILED tests/test_api_endpoints.py::TestAPIAuthentication::test_login_auth_success
FAILED tests/test_api_endpoints.py::TestAPIProtectedEndpoints::test_chat_endpoint_requires_auth
FAILED tests/test_api_endpoints.py::TestAPIProtectedEndpoints::test_profile_page_requires_auth
FAILED tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_dashboard_requires_auth
FAILED tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_stats_requires_auth
FAILED tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_users_list_requires_auth
FAILED tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_roles_list_requires_auth
FAILED tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_groups_list_requires_auth
FAILED tests/test_api_endpoints.py::TestAPIErrorHandling::test_unauthorized_access
FAILED tests/test_database_setup.py::TestDatabaseSetup::test_foreign_key_constraints
FAILED tests/test_hippocampus_database.py::test_get_base_instructions - Asser...
FAILED tests/test_hippocampus_database.py::test_query_personal_variables - as...
FAILED tests/test_security.py::TestSecurityManager::test_delete_user - Assert...
ERROR tests/test_api_endpoints.py::TestAPIAuthentication::test_logout - asser...
ERROR tests/test_api_endpoints.py::TestAPIProtectedEndpoints::test_chat_endpoint_with_auth
ERROR tests/test_api_endpoints.py::TestAPIProtectedEndpoints::test_profile_page_with_auth
ERROR tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_dashboard_with_auth
ERROR tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_stats_with_auth
ERROR tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_users_list_with_auth
ERROR tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_roles_list_with_auth
ERROR tests/test_api_endpoints.py::TestAdminAPIEndpoints::test_admin_groups_list_with_auth
ERROR tests/test_api_endpoints.py::TestAdminUserCRUD::test_create_user - asse...
ERROR tests/test_api_endpoints.py::TestAdminUserCRUD::test_get_user - assert ...
ERROR tests/test_api_endpoints.py::TestAdminUserCRUD::test_update_user - asse...
ERROR tests/test_api_endpoints.py::TestAdminUserCRUD::test_delete_user - asse...
ERROR tests/test_api_endpoints.py::TestAdminRoleCRUD::test_create_role - asse...
ERROR tests/test_api_endpoints.py::TestAdminRoleCRUD::test_get_role - assert ...
ERROR tests/test_api_endpoints.py::TestAdminRoleCRUD::test_update_role - asse...
ERROR tests/test_api_endpoints.py::TestAdminRoleCRUD::test_delete_role - asse...
ERROR tests/test_api_endpoints.py::TestAdminGroupCRUD::test_create_group - as...
ERROR tests/test_api_endpoints.py::TestAdminGroupCRUD::test_get_group - asser...
ERROR tests/test_api_endpoints.py::TestAdminGroupCRUD::test_update_group - as...
ERROR tests/test_api_endpoints.py::TestAdminGroupCRUD::test_delete_group - as...
ERROR tests/test_api_endpoints.py::TestAPIErrorHandling::test_404_not_found
ERROR tests/test_api_endpoints.py::TestAPIErrorHandling::test_invalid_json - ...
ERROR tests/test_api_endpoints.py::TestAPIErrorHandling::test_missing_required_fields
=================== 13 failed, 33 passed, 23 errors in 7.28s ===================
